{"version":3,"file":"errorReporting.js","sourceRoot":"","sources":["errorReporting.ts"],"names":[],"mappings":"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","sourcesContent":["import { ErrorInfo } from 'react'\n\ninterface ErrorReport {\n  error: Error\n  errorInfo?: ErrorInfo\n  timestamp: string\n  url: string\n  userAgent: string\n  userId?: string\n  sessionId?: string\n  buildVersion?: string\n}\n\nclass ErrorReportingService {\n  private static instance: ErrorReportingService\n  private queue: ErrorReport[] = []\n  private isReporting = false\n\n  static getInstance(): ErrorReportingService {\n    if (!ErrorReportingService.instance) {\n      ErrorReportingService.instance = new ErrorReportingService()\n    }\n    return ErrorReportingService.instance\n  }\n\n  captureException(error: Error, options: {\n    errorInfo?: ErrorInfo\n    userId?: string\n    sessionId?: string\n    tags?: Record<string, string>\n    context?: Record<string, any>\n  } = {}) {\n    const report: ErrorReport = {\n      error: {\n        name: error.name,\n        message: error.message,\n        stack: error.stack || '',\n      } as Error,\n      errorInfo: options.errorInfo,\n      timestamp: new Date().toISOString(),\n      url: typeof window !== 'undefined' ? window.location.href : '',\n      userAgent: typeof window !== 'undefined' ? window.navigator.userAgent : '',\n      userId: options.userId,\n      sessionId: options.sessionId || this.getSessionId(),\n      buildVersion: process.env.NEXT_PUBLIC_BUILD_VERSION,\n    }\n\n    // Add to queue\n    this.queue.push(report)\n\n    // Log to console in development\n    if (process.env.NODE_ENV === 'development') {\n      console.error('Error Report:', report)\n    }\n\n    // Send reports in production\n    if (process.env.NODE_ENV === 'production') {\n      this.sendReports()\n    }\n  }\n\n  private async sendReports() {\n    if (this.isReporting || this.queue.length === 0) return\n\n    this.isReporting = true\n\n    try {\n      const reports = [...this.queue]\n      this.queue = []\n\n      // Send to your error reporting service\n      // This could be Sentry, LogRocket, custom endpoint, etc.\n      await this.sendToService(reports)\n\n    } catch (error) {\n      console.error('Failed to send error reports:', error)\n      // Put reports back in queue to retry later\n      this.queue.unshift(...this.queue)\n    } finally {\n      this.isReporting = false\n    }\n  }\n\n  private async sendToService(reports: ErrorReport[]) {\n    // Example implementation - replace with your actual service\n    const endpoint = process.env.NEXT_PUBLIC_ERROR_REPORTING_ENDPOINT\n\n    if (!endpoint) {\n      console.warn('No error reporting endpoint configured')\n      return\n    }\n\n    try {\n      const response = await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          reports,\n          metadata: {\n            timestamp: new Date().toISOString(),\n            environment: process.env.NODE_ENV,\n            buildVersion: process.env.NEXT_PUBLIC_BUILD_VERSION,\n          },\n        }),\n      })\n\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`)\n      }\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log(`Successfully sent ${reports.length} error reports`)\n      }\n    } catch (error) {\n      console.error('Error reporting service failed:', error)\n      throw error\n    }\n  }\n\n  private getSessionId(): string {\n    if (typeof window === 'undefined') return 'server'\n\n    let sessionId = sessionStorage.getItem('error-session-id')\n    if (!sessionId) {\n      sessionId = `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`\n      sessionStorage.setItem('error-session-id', sessionId)\n    }\n    return sessionId\n  }\n\n  // Manual error reporting for custom errors\n  reportError(message: string, context?: Record<string, any>) {\n    const error = new Error(message)\n    this.captureException(error, { context })\n  }\n\n  // Performance monitoring\n  reportPerformanceIssue(metric: string, value: number, context?: Record<string, any>) {\n    if (process.env.NODE_ENV === 'production') {\n      this.reportError(`Performance issue: ${metric} = ${value}`, {\n        metric,\n        value,\n        ...context,\n      })\n    }\n  }\n}\n\n// Export singleton instance\nexport const errorReporting = ErrorReportingService.getInstance()\n\n// Utility functions\nexport const captureException = (error: Error, options?: Parameters<typeof errorReporting.captureException>[1]) => {\n  errorReporting.captureException(error, options)\n}\n\nexport const reportError = (message: string, context?: Record<string, any>) => {\n  errorReporting.reportError(message, context)\n}\n\nexport const reportPerformanceIssue = (metric: string, value: number, context?: Record<string, any>) => {\n  errorReporting.reportPerformanceIssue(metric, value, context)\n}\n"]}