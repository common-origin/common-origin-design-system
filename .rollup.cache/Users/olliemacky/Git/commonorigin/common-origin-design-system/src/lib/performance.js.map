{"version":3,"file":"performance.js","sourceRoot":"","sources":["performance.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Performance Monitoring Utilities\n * Provides tools for monitoring Core Web Vitals and performance metrics\n */\n\n// Core Web Vitals types\ninterface WebVitalsMetric {\n  name: string\n  value: number\n  rating: 'good' | 'needs-improvement' | 'poor'\n  delta: number\n  id: string\n}\n\ninterface PerformanceEntry extends globalThis.PerformanceEntry {\n  size?: number\n  renderTime?: number\n  loadTime?: number\n  processingStart?: number\n  hadRecentInput?: boolean\n}\n\ninterface PerformanceNavigationTiming extends PerformanceEntry {\n  fetchStart: number\n  responseStart: number\n}\n\nclass PerformanceMonitor {\n  private metrics: Map<string, WebVitalsMetric> = new Map()\n  private observers: Map<string, PerformanceObserver> = new Map()\n\n  constructor() {\n    if (typeof window !== 'undefined') {\n      this.initializeObservers()\n    }\n  }\n\n  /**\n   * Initialize performance observers for various metrics\n   */\n  private initializeObservers(): void {\n    // Largest Contentful Paint (LCP)\n    this.observeMetric('largest-contentful-paint', (entries) => {\n      const lastEntry = entries[entries.length - 1] as PerformanceEntry\n      this.reportMetric('LCP', lastEntry.startTime)\n    })\n\n    // First Input Delay (FID) - using 'first-input' if available\n    if ('PerformanceEventTiming' in window) {\n      this.observeMetric('first-input', (entries) => {\n        const firstInput = entries[0] as PerformanceEntry\n        if (firstInput.processingStart) {\n          const fid = firstInput.processingStart - firstInput.startTime\n          this.reportMetric('FID', fid)\n        }\n      })\n    }\n\n    // Cumulative Layout Shift (CLS)\n    this.observeMetric('layout-shift', (entries) => {\n      let clsValue = 0\n      entries.forEach((entry: any) => {\n        if (!entry.hadRecentInput) {\n          clsValue += entry.value\n        }\n      })\n      this.reportMetric('CLS', clsValue)\n    })\n\n    // Time to First Byte (TTFB)\n    this.observeMetric('navigation', (entries) => {\n      const navigation = entries[0] as PerformanceNavigationTiming\n      const ttfb = navigation.responseStart - navigation.fetchStart\n      this.reportMetric('TTFB', ttfb)\n    })\n  }\n\n  /**\n   * Observe a specific performance metric\n   */\n  private observeMetric(type: string, callback: (entries: PerformanceEntry[]) => void): void {\n    try {\n      const observer = new PerformanceObserver((list) => {\n        callback(list.getEntries())\n      })\n      \n      observer.observe({ type, buffered: true })\n      this.observers.set(type, observer)\n    } catch (error) {\n      console.warn(`Failed to observe ${type}:`, error)\n    }\n  }\n\n  /**\n   * Report a performance metric with rating\n   */\n  private reportMetric(name: string, value: number): void {\n    const rating = this.getRating(name, value)\n    const metric: WebVitalsMetric = {\n      name,\n      value,\n      rating,\n      delta: value,\n      id: `${name}-${Date.now()}`,\n    }\n\n    this.metrics.set(name, metric)\n    this.logMetric(metric)\n\n    // Report to analytics if available\n    if (typeof window !== 'undefined' && window.gtag) {\n      window.gtag('event', name, {\n        event_category: 'Web Vitals',\n        value: Math.round(value),\n        custom_parameter_1: rating,\n      })\n    }\n\n    // Report to custom analytics endpoint\n    this.sendToAnalytics(metric)\n  }\n\n  /**\n   * Get performance rating based on thresholds\n   */\n  private getRating(name: string, value: number): 'good' | 'needs-improvement' | 'poor' {\n    const thresholds = {\n      LCP: { good: 2500, poor: 4000 },\n      FID: { good: 100, poor: 300 },\n      CLS: { good: 0.1, poor: 0.25 },\n      TTFB: { good: 800, poor: 1800 },\n    }\n\n    const threshold = thresholds[name as keyof typeof thresholds]\n    if (!threshold) return 'good'\n\n    if (value <= threshold.good) return 'good'\n    if (value <= threshold.poor) return 'needs-improvement'\n    return 'poor'\n  }\n\n  /**\n   * Log metric to console in development\n   */\n  private logMetric(metric: WebVitalsMetric): void {\n    if (process.env.NODE_ENV === 'development') {\n      const emoji = {\n        good: '✅',\n        'needs-improvement': '⚠️',\n        poor: '❌',\n      }[metric.rating]\n\n      if (process.env.NODE_ENV === 'development') {\n        console.log(\n          `${emoji} ${metric.name}: ${metric.value.toFixed(2)}ms (${metric.rating})`\n        )\n      }\n    }\n  }\n\n  /**\n   * Send metrics to analytics endpoint\n   */\n  private async sendToAnalytics(metric: WebVitalsMetric): Promise<void> {\n    try {\n      // Only send in production\n      if (process.env.NODE_ENV !== 'production') return\n\n      const endpoint = process.env.NEXT_PUBLIC_ANALYTICS_ENDPOINT\n      if (!endpoint) return\n\n      await fetch(endpoint, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          ...metric,\n          url: window.location.href,\n          userAgent: navigator.userAgent,\n          timestamp: Date.now(),\n        }),\n      })\n    } catch (error) {\n      console.warn('Failed to send analytics:', error)\n    }\n  }\n\n  /**\n   * Get all collected metrics\n   */\n  public getMetrics(): WebVitalsMetric[] {\n    return Array.from(this.metrics.values())\n  }\n\n  /**\n   * Get a specific metric\n   */\n  public getMetric(name: string): WebVitalsMetric | undefined {\n    return this.metrics.get(name)\n  }\n\n  /**\n   * Disconnect all observers\n   */\n  public disconnect(): void {\n    this.observers.forEach((observer) => observer.disconnect())\n    this.observers.clear()\n  }\n}\n\n// Bundle size analysis utilities\nexport const getBundleStats = (): Record<string, any> => {\n  if (typeof window === 'undefined') return {}\n\n  return {\n    // Calculate approximate bundle sizes from performance entries\n    scripts: performance.getEntriesByType('resource')\n      .filter(entry => entry.name.includes('.js'))\n      .map(entry => ({\n        name: entry.name.split('/').pop(),\n        size: (entry as any).transferSize || 0,\n        duration: entry.duration,\n      })),\n    \n    stylesheets: performance.getEntriesByType('resource')\n      .filter(entry => entry.name.includes('.css'))\n      .map(entry => ({\n        name: entry.name.split('/').pop(),\n        size: (entry as any).transferSize || 0,\n        duration: entry.duration,\n      })),\n    \n    // Total page weight\n    totalTransferSize: performance.getEntriesByType('resource')\n      .reduce((total, entry) => total + ((entry as any).transferSize || 0), 0),\n  }\n}\n\n// Export singleton instance\nexport const performanceMonitor = new PerformanceMonitor()\n\n// Export utilities for use in components\nexport const reportWebVitals = (metric: WebVitalsMetric): void => {\n  if (process.env.NODE_ENV === 'development') {\n    console.log('Web Vital:', metric)\n  }\n  \n  // Send to analytics service\n  if (typeof window !== 'undefined' && window.gtag) {\n    window.gtag('event', metric.name, {\n      event_category: 'Web Vitals',\n      value: Math.round(metric.value),\n      custom_parameter_1: metric.rating,\n    })\n  }\n}\n\n// Type augmentation for gtag\ndeclare global {\n  interface Window {\n    gtag?: (...args: any[]) => void\n  }\n}\n\nexport default PerformanceMonitor\n"]}