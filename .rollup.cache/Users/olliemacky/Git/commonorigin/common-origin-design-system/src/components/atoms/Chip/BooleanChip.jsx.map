{"version":3,"file":"BooleanChip.jsx","sourceRoot":"","sources":["BooleanChip.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,EAAE,IAAI,EAAE,MAAM,SAAS,CAAA;AAE9B,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,mBAAmB,CAAA;AASpE;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,IAAM,WAAW,GAA+B,UAAC,EAUvD;IATC,IAAA,QAAQ,cAAA,EACR,QAAQ,cAAA,EACR,OAAO,aAAA,EACP,YAAe,EAAf,IAAI,mBAAG,QAAQ,KAAA,EACf,gBAAgB,EAAhB,QAAQ,mBAAG,KAAK,KAAA,EACD,UAAU,oBAAA,EACX,SAAS,mBAAA,EACH,eAAe,yBAAA,EAChC,KAAK,cAT8C,wGAUvD,CADS;IAER,IAAM,WAAW,GAAG;QAClB,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,EAAE,CAAA;SACV;IACH,CAAC,CAAA;IAED,IAAM,aAAa,GAAG,UAAC,KAA0B;QAC/C,wCAAwC;QACxC,IAAI,KAAK,CAAC,GAAG,KAAK,OAAO,IAAI,KAAK,CAAC,GAAG,KAAK,GAAG,EAAE;YAC9C,KAAK,CAAC,cAAc,EAAE,CAAA;YACtB,WAAW,EAAE,CAAA;SACd;IACH,CAAC,CAAA;IAED,OAAO,CACL,CAAC,iBAAiB,CAChB,QAAQ,CAAC,QAAQ,CACjB,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,SAAS,CAAC,CAAC,QAAQ,IAAI,SAAS,CAAC,CACjC,UAAU,CAAC,CAAC,CAAC,QAAQ,CAAC,CACtB,SAAS,CAAC,CAAC,QAAQ,CAAC,CACpB,OAAO,CAAC,CAAC,WAAW,CAAC,CACrB,SAAS,CAAC,CAAC,aAAa,CAAC,CACzB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CACnC,IAAI,CAAC,UAAU,CACf,YAAY,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAC1C,UAAU,CAAC,CAAC,SAAS,CAAC,CACtB,gBAAgB,CAAC,CAAC,eAAe,CAAC,CAClC,aAAa,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAC7C,WAAW,CAAC,CAAC,UAAU,CAAC,CACxB,IAAI,KAAK,CAAC,CAEV;MAAA,CAAC,2CAA2C,CAC5C;MAAA,CAAC,QAAQ,IAAI,CACX,CAAC,aAAa,CAAC,WAAW,CAAC,MAAM,CAC/B;UAAA,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAC9B;QAAA,EAAE,aAAa,CAAC,CACjB,CAED;;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,iBAAiB,CAAC,CACrB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport { Icon } from '../Icon'\nimport { BaseChipProps } from './shared/types'\nimport { StyledChipWrapper, IconContainer } from './shared/ChipBase'\n\nexport interface BooleanChipProps extends BaseChipProps {\n  /** Whether the chip is in selected state */\n  selected: boolean\n  /** Callback function when the chip is clicked/toggled */\n  onClick: () => void\n}\n\n/**\n * BooleanChip - Toggleable chip for quick filter controls\n * \n * Use this component for multi-select filter controls where users can\n * see which options are active. Common in table filtering patterns where\n * users toggle filters on/off.\n * \n * Features:\n * - Shows checkmark icon when selected\n * - Entire chip is clickable to toggle\n * - Keyboard activation with Space or Enter\n * - Uses checkbox role with aria-checked\n * - Visual background change when selected\n */\nexport const BooleanChip: React.FC<BooleanChipProps> = ({\n  children,\n  selected,\n  onClick,\n  size = 'medium',\n  disabled = false,\n  'data-testid': dataTestId,\n  'aria-label': ariaLabel,\n  'aria-describedby': ariaDescribedBy,\n  ...props\n}) => {\n  const handleClick = () => {\n    if (!disabled) {\n      onClick()\n    }\n  }\n  \n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    // Handle activation with Space or Enter\n    if (event.key === 'Enter' || event.key === ' ') {\n      event.preventDefault()\n      handleClick()\n    }\n  }\n  \n  return (\n    <StyledChipWrapper\n      $variant=\"subtle\"\n      $size={size}\n      $disabled={disabled || undefined}\n      $clickable={!disabled}\n      $selected={selected}\n      onClick={handleClick}\n      onKeyDown={handleKeyDown}\n      tabIndex={disabled ? undefined : 0}\n      role=\"checkbox\"\n      aria-checked={selected ? 'true' : 'false'}\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedBy}\n      aria-disabled={disabled ? 'true' : undefined}\n      data-testid={dataTestId}\n      {...props}\n    >\n      {/* Show selected indicator when selected */}\n      {selected && (\n        <IconContainer aria-hidden=\"true\">\n          <Icon name=\"check\" size=\"sm\" />\n        </IconContainer>\n      )}\n      \n      {children}\n    </StyledChipWrapper>\n  )\n}\n"]}