{"version":3,"file":"utils.js","sourceRoot":"","sources":["utils.ts"],"names":[],"mappings":"AAAA,OAAO,MAAM,MAAM,gCAAgC,CAAA;AAG9B,IAAA,IAAI,GAAO,MAAM,eAAb,CAAa;AAEtC,6EAA6E;AAC7E,MAAM,CAAC,IAAM,wBAAwB,GAAG,UAAC,OAAoB,EAAE,QAAkB;IAC/E,2DAA2D;IAC3D,IAAI,QAAQ,EAAE;QACZ,OAAO;YACL,eAAe,EAAE,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,oBAAoB,CAAC;YACvE,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;SAC9B,CAAA;KACF;IAED,QAAQ,OAAO,EAAE;QACf,KAAK,UAAU;YACb,OAAO;gBACL,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,eAAe;gBACvD,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,SAAS;aACxC,CAAA;QACH,KAAK,QAAQ;YACX,OAAO;gBACL,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAe;gBACrD,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,SAAS;aACtC,CAAA;QACH,KAAK,aAAa;YAChB,OAAO;gBACL,eAAe,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,eAAe;gBAC1D,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,SAAS;aAC3C,CAAA;QACH,KAAK,SAAS,CAAC;QACf;YACE,OAAO;gBACL,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,eAAe;gBAC7C,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;aAC9B,CAAA;KACJ;AACH,CAAC,CAAA;AAED,0EAA0E;AAC1E,MAAM,CAAC,IAAM,qBAAqB,GAAG,UAAC,IAA2B;IAC/D,QAAQ,IAAI,EAAE;QACZ,KAAK,OAAO;YACV,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI;gBAC3B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,OAAO;aAClC,CAAA;QACH,KAAK,QAAQ,CAAC;QACd;YACE,OAAO;gBACL,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI;gBAC5B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO;aACnC,CAAA;KACJ;AACH,CAAC,CAAA;AAED,+BAA+B;AAC/B,OAAO,EAAE,IAAI,IAAI,UAAU,EAAE,CAAA","sourcesContent":["import tokens from '../../../../styles/tokens.json'\nimport { ChipVariant, BaseChipProps } from './types'\n\nconst { component: { chip } } = tokens\n\n// Helper function to get variant styles as objects for CSS custom properties\nexport const getVariantStylesAsObject = (variant: ChipVariant, selected?: boolean) => {\n  // Boolean chips with selected state get special background\n  if (selected) {\n    return {\n      backgroundColor: tokens.semantic.color.background['interactive-subtle'],\n      color: chip.default.textColor\n    }\n  }\n  \n  switch (variant) {\n    case 'emphasis':\n      return {\n        backgroundColor: chip.variants.emphasis.backgroundColor,\n        color: chip.variants.emphasis.textColor\n      }\n    case 'subtle':\n      return {\n        backgroundColor: chip.variants.subtle.backgroundColor,\n        color: chip.variants.subtle.textColor\n      }\n    case 'interactive':\n      return {\n        backgroundColor: chip.variants.interactive.backgroundColor,\n        color: chip.variants.interactive.textColor\n      }\n    case 'default':\n    default:\n      return {\n        backgroundColor: chip.default.backgroundColor,\n        color: chip.default.textColor\n      }\n  }\n}\n\n// Helper function to get size styles as objects for CSS custom properties\nexport const getSizeStylesAsObject = (size: BaseChipProps['size']) => {\n  switch (size) {\n    case 'small':\n      return {\n        font: chip.sizes.small.font,\n        padding: chip.sizes.small.padding\n      }\n    case 'medium':\n    default:\n      return {\n        font: chip.sizes.medium.font,\n        padding: chip.sizes.medium.padding\n      }\n  }\n}\n\n// Export chip tokens for reuse\nexport { chip as chipTokens }\n"]}