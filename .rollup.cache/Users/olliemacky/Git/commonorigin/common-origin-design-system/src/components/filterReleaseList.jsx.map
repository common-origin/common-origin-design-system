{"version":3,"file":"filterReleaseList.jsx","sourceRoot":"","sources":["filterReleaseList.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,MAAM,MAAM,mBAAmB,CAAA;AAEtC,OAAO,EAAE,mBAAmB,EAAE,MAAM,IAAI,CAAA;AACxC,OAAO,MAAM,MAAM,sBAAsB,CAAA;AAOzC,IAAM,SAAS,GAAG,MAAM,CAAC,GAAG,4FAAA,kBACZ,EAAsB,KACrC,KADe,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CACrC,CAAA;AAED,IAAM,aAAa,GAAG,MAAM,CAAC,CAAC,0JAAA,qBACX,EAAsB,cAC9B,EAAkC,kBAC9B,EAAuB,4BAErC,KAJkB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAC9B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,EAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAErC,CAAA;AAED,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,wLAAA,wDAGrB,EAAsB,+CAGpB,EAAsB,UAEhC,KALQ,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,EAGpB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAEhC,CAAA;AAED,MAAM,CAAC,IAAM,iBAAiB,GAAqC,UAAC,EAGnE;QAFC,QAAQ,cAAA,EACR,yBAAyB,EAAzB,iBAAiB,mBAAG,KAAK,KAAA;IAEzB,IAAM,WAAW,GAAG,QAAQ,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAA;IAEnD,OAAO,CACL,CAAC,SAAS,CACR;MAAA,CAAC,iBAAiB,IAAI,CACpB,CAAC,aAAa,CACZ;UAAA,CAAC,WAAW;gBACV,CAAC,CAAC,kBAAW,QAAQ,CAAC,MAAM,qBAAW,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,CAAE;gBACzE,CAAC,CAAC,0CAA0C,CAEhD;QAAA,EAAE,aAAa,CAAC,CACjB,CAED;;MAAA,CAAC,WAAW,CAAC,CAAC,CAAC,CACb,CAAC,WAAW,CACV;UAAA,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAC,OAAO,EAAE,KAAK,IAAK,OAAA,CAChC,CAAC,mBAAmB,CAClB,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAClB,KAAK,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CACrB,UAAU,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAC3B,KAAK,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAC1B,WAAW,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CACjC,YAAY,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU,CAAC,CAClD,UAAU,CAAC,CAAC,oBAAa,OAAO,CAAC,IAAI,CAAE,CAAC,EACxC,CACH,EAViC,CAUjC,CAAC,CACJ;QAAA,EAAE,WAAW,CAAC,CACf,CAAC,CAAC,CAAC,CAAC,iBAAiB,IAAI,CACxB,CAAC,aAAa,CACZ;;QACF,EAAE,aAAa,CAAC,CACjB,CACH;IAAA,EAAE,SAAS,CAAC,CACb,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport type Release from '../../interfaces/release'\nimport { FeaturedReleaseCard } from './'\nimport tokens from '@/styles/tokens.json'\n\ninterface FilterReleaseListProps {\n  releases: Release[]\n  showFilterMessage?: boolean\n}\n\nconst Container = styled.div`\n  margin-top: ${tokens.base.spacing[4]};\n`\n\nconst FilterMessage = styled.p`\n  margin-bottom: ${tokens.base.spacing[6]};\n  color: ${tokens.semantic.color.text.subdued};\n  font-size: ${tokens.base.fontSize[2]};\n  font-style: italic;\n`\n\nconst ReleaseGrid = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: ${tokens.base.spacing[4]};\n\n  @media (min-width: 768px) {\n    gap: ${tokens.base.spacing[6]};\n  }\n`\n\nexport const FilterReleaseList: React.FC<FilterReleaseListProps> = ({ \n  releases, \n  showFilterMessage = false \n}) => {\n  const hasReleases = releases && releases.length > 0\n\n  return (\n    <Container>\n      {showFilterMessage && (\n        <FilterMessage>\n          {hasReleases \n            ? `Showing ${releases.length} release${releases.length !== 1 ? 's' : ''}`\n            : 'No releases found matching your criteria'\n          }\n        </FilterMessage>\n      )}\n      \n      {hasReleases ? (\n        <ReleaseGrid>\n          {releases.map((release, index) => (\n            <FeaturedReleaseCard\n              key={release.slug}\n              title={release.title}\n              artistName={release.artist}\n              image={release.coverImage}\n              recordLabel={release.recordLabel}\n              featuredChip={index === 0 ? 'Latest' : 'Featured'}\n              releaseUrl={`/releases/${release.slug}`}\n            />\n          ))}\n        </ReleaseGrid>\n      ) : !showFilterMessage && (\n        <FilterMessage>\n          No releases available\n        </FilterMessage>\n      )}\n    </Container>\n  )\n}"]}