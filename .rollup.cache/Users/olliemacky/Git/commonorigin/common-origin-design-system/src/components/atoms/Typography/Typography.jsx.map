{"version":3,"file":"Typography.jsx","sourceRoot":"","sources":["Typography.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport tokens from '@/styles/tokens.json'\n\nconst { semantic: { typography, color } } = tokens\n\nexport type TypographyVariant = \n  | 'display' \n  | 'h1' \n  | 'h2' \n  | 'h3' \n  | 'h4' \n  | 'h5' \n  | 'h6' \n  | 'subtitle' \n  | 'body' \n  | 'small' \n  | 'overline' \n  | 'caption' \n  | 'button1' \n  | 'button2' \n  | 'button3' \n  | 'label'\n\nexport type TypographyColor = \"default\" | \"emphasis\" | \"subdued\" | \"inverse\" | \"disabled\" | \"interactive\" | \"error\" | \"success\" | \"warning\"\n\nexport interface TypographyProps {\n  /** Typography variant defining the semantic meaning and style */\n  variant?: TypographyVariant\n  /** Color variant for the text */\n  color?: TypographyColor\n  /** Content to render */\n  children: React.ReactNode\n  /** HTML element to render as (overrides default semantic element) */\n  as?: React.ElementType\n  /** Data test id for testing */\n  'data-testid'?: string\n}\n\ninterface StyledTypographyProps {\n  $variant: TypographyVariant\n  $color: TypographyColor\n}\n\nconst getTypographyStyles = (variant: TypographyVariant) => {\n  const styles = {\n    display: `font: ${typography.display}; letter-spacing: ${tokens.base.letterSpacing[0]};`,\n    h1: `font: ${typography.h1}; letter-spacing: ${tokens.base.letterSpacing[0]};`,\n    h2: `font: ${typography.h2}; letter-spacing: ${tokens.base.letterSpacing[1]};`,\n    h3: `font: ${typography.h3}; letter-spacing: ${tokens.base.letterSpacing[1]};`,\n    h4: `font: ${typography.h4}; letter-spacing: ${tokens.base.letterSpacing[1]};`,\n    h5: `font: ${typography.h5}; letter-spacing: ${tokens.base.letterSpacing[2]};`,\n    h6: `font: ${typography.h6}; letter-spacing: ${tokens.base.letterSpacing[2]};`,\n    subtitle: `font: ${typography.subtitle};`,\n    body: `font: ${typography.body};`,\n    small: `font: ${typography.small};`,\n    overline: `font: ${typography.overline};`,\n    caption: `font: ${typography.caption}; text-transform: uppercase;`,\n    button1: `font: ${typography.button1};`,\n    button2: `font: ${typography.button2};`,\n    button3: `font: ${typography.button3};`,\n    label: `font: ${typography.label};`,\n  }\n  \n  return styles[variant] || styles.body\n}\n\nconst getTextColor = (colorVariant: TypographyColor) => {\n  const colorMap = {\n    default: color.text.default,\n    emphasis: color.text.emphasis,\n    subdued: color.text.subdued,\n    inverse: color.text.inverse,\n    disabled: color.text.disabled,\n    interactive: color.text.interactive,\n    error: color.text.error,\n    success: color.text.success,\n    warning: color.text.warning,\n  }\n  \n  return colorMap[colorVariant] || colorMap.default\n}\n\nconst getDefaultElement = (variant: TypographyVariant): React.ElementType => {\n  const elementMap: Record<TypographyVariant, React.ElementType> = {\n    display: 'h1',\n    h1: 'h1',\n    h2: 'h2',\n    h3: 'h3',\n    h4: 'h4',\n    h5: 'h5',\n    h6: 'h6',\n    subtitle: 'p',\n    body: 'p',\n    small: 'span',\n    overline: 'span',\n    caption: 'span',\n    button1: 'span',\n    button2: 'span',\n    button3: 'span',\n    label: 'span',\n  }\n  \n  return elementMap[variant] || 'span'\n}\n\nconst StyledTypography = styled.span.withConfig({\n  shouldForwardProp: (prop) => !['$variant', '$color'].includes(prop),\n})<StyledTypographyProps>`\n  ${({ $variant }) => getTypographyStyles($variant)}\n  color: ${({ $color }) => getTextColor($color)};\n  margin: 0;\n  \n  /* Ensure proper line height for readability */\n  ${({ $variant }) => {\n    if (['body', 'subtitle', 'small'].includes($variant)) {\n      return 'line-height: 1.5;'\n    }\n    return ''\n  }}\n`\n\n/**\n * Typography is an atomic component for rendering text with semantic meaning and consistent styling.\n * \n * Features:\n * - Semantic variants (h1-h6, body, subtitle, etc.)\n * - Color variants for different contexts\n * - Automatic semantic HTML element selection\n * - Manual element override support\n * - Direct semantic token usage (no component tokens needed)\n * - Full accessibility support\n * \n * @example\n * ```tsx\n * <Typography variant=\"h1\">Main Heading</Typography>\n * <Typography variant=\"body\" color=\"subdued\">Body text</Typography>\n * <Typography variant=\"caption\" as=\"figcaption\">Image caption</Typography>\n * ```\n */\nexport const Typography: React.FC<TypographyProps> = ({ \n  variant = 'body', \n  children, \n  color = 'default',\n  as,\n  'data-testid': dataTestId\n}) => {\n  // $variant and $color are only used for styled-components prop filtering\n  const defaultElement = getDefaultElement(variant)\n  const elementType = as || defaultElement\n\n  return (\n    <StyledTypography \n      as={elementType}\n      $variant={variant}\n      $color={color}\n      data-testid={dataTestId}\n    >\n      {children}\n    </StyledTypography>\n  )\n}\n"]}