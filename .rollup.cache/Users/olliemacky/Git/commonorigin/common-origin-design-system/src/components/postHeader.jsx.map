{"version":3,"file":"postHeader.jsx","sourceRoot":"","sources":["postHeader.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport type Author from '../../interfaces/author'\nimport { Avatar, Button, ChipGroup, CoverImage, DateFormatter, PostTitle, Stack, Typography } from './'\nimport tokens from '@/styles/tokens.json'\n\nconst { base: { spacing, border } } = tokens\n\ntype Props = {\n  title: string\n  excerpt: string\n  tag: string\n  coverImage: string\n  date: string\n  author: Author\n  artist: String\n  slug: string\n  labels: string[]\n}\n\nconst HeaderContainer = styled.div<{ $margin?: string; $maxWidth?: string }>`\n  margin: ${props => props.$margin || `${spacing[8]} 0`};\n  max-width: ${props => props.$maxWidth || '64rem'};\n  margin-left: auto;\n  margin-right: auto;\n  \n  @media (min-width: 768px) {\n    margin-bottom: ${spacing[4]};\n  }\n`\n\nconst DesignHeaderContainer = styled.div`\n  margin: ${spacing[8]} 0;\n  max-width: 64rem;\n  margin-left: auto;\n  margin-right: auto;\n  \n  @media (min-width: 768px) {\n    margin-bottom: ${spacing[16]};\n  }\n`\n\nconst ArtHeaderContainer = styled.div`\n  margin-top: ${spacing[8]};\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst ArtGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(12, 1fr);\n  gap: ${spacing[8]};\n`\n\nconst ArtSidebar = styled.div`\n  grid-column: span 12;\n  \n  @media (min-width: 1280px) {\n    grid-column: span 3;\n    position: fixed;\n  }\n`\n\nconst ArtMainContent = styled.div`\n  grid-column: span 12;\n  \n  @media (min-width: 1280px) {\n    grid-column: span 9 / 13;\n    grid-column-start: 4;\n  }\n`\n\nconst ContentWrapper = styled.div`\n  max-width: 300px;\n`\n\nconst ImageWrapper = styled.div<{ $marginTop?: string }>`\n  border-radius: ${border.radius[6]};\n  overflow: hidden;\n  margin-top: ${props => props.$marginTop || '0'};\n`\n\nconst DefaultHeaderContainer = styled.div`\n  margin-bottom: ${spacing[8]};\n  \n  @media (min-width: 768px) {\n    margin-bottom: ${spacing[16]};\n  }\n  \n  @media (min-width: 640px) {\n    margin-left: 0;\n    margin-right: 0;\n  }\n`\n\nexport const PostHeader = ({ \n  title,\n  excerpt, \n  author,\n  date,\n  tag, \n  coverImage, \n  labels,\n }: Props) => {\n  if ( tag === 'portfolio' ) {\n    return (\n      <HeaderContainer>\n        <Button\n          variant='secondary'\n          purpose='link'\n          url='/portfolio'>\n            Back to Portfolio\n        </Button>\n        <PostTitle>{title}</PostTitle>\n        <Stack direction=\"column\" gap=\"lg\">\n          <ChipGroup labels={labels} />\n          <ImageWrapper>\n            <CoverImage title={title} src={coverImage} />\n          </ImageWrapper>\n        </Stack>\n      </HeaderContainer>\n    )\n  } else if ( tag === 'design' ) {\n    return (\n      <DesignHeaderContainer>\n        <Button\n          variant='secondary'\n          purpose='link'\n          url='/design'>\n            Back to all Design\n        </Button>\n        <PostTitle>{title}</PostTitle>\n        <Stack direction=\"column\">\n          <Stack direction=\"row\" alignItems=\"center\" gap=\"sm\">\n            <Avatar name={author.name} picture={author.picture} />\n            <Typography variant=\"small\"> | </Typography>\n            <DateFormatter dateString={date} />\n          </Stack>\n          <ChipGroup labels={labels} />\n        </Stack>\n        <ImageWrapper $marginTop={spacing[8]}>\n          <CoverImage title={title} src={coverImage} />\n        </ImageWrapper>\n      </DesignHeaderContainer>\n    )\n  } else if ( tag === 'art' ) {\n    return (\n      <ArtHeaderContainer>\n        <ArtGrid>\n          <ArtSidebar>\n            <ContentWrapper>\n              <Button\n                variant='secondary'\n                purpose='link'\n                url='/art'>\n                  Back to all Art\n              </Button>\n              <PostTitle>{title}</PostTitle>\n              <Stack direction=\"column\" gap=\"md\">\n                <DateFormatter dateString={date} />\n                <Typography variant=\"body\" color=\"subdued\">{excerpt}</Typography>\n                <Stack direction=\"column\">\n                  <ChipGroup labels={labels} />\n                </Stack>\n              </Stack>\n            </ContentWrapper>\n          </ArtSidebar>\n          <ArtMainContent>\n            <ImageWrapper>\n              <CoverImage title={title} src={coverImage} />\n            </ImageWrapper>\n          </ArtMainContent>\n        </ArtGrid>\n      </ArtHeaderContainer>\n    )\n  } else {\n    return (\n      <DefaultHeaderContainer>\n        <PostTitle>{title}</PostTitle>\n        <CoverImage title={title} src={coverImage} />\n      </DefaultHeaderContainer>\n    )\n  }\n}\n\n"]}