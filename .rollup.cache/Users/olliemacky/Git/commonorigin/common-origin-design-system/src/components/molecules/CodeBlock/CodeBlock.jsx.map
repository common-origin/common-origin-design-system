{"version":3,"file":"CodeBlock.jsx","sourceRoot":"","sources":["CodeBlock.tsx"],"names":[],"mappings":"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","sourcesContent":["import React, { useState, useRef, useEffect } from 'react'\nimport styled from 'styled-components'\nimport { Button } from '../../atoms/Button'\nimport tokens from '@/styles/tokens.json'\n\nconst { semantic: { color, border, spacing } } = tokens\n\nexport interface CodeBlockProps {\n  children: string\n  showCopyButton?: boolean\n  onCopy?: () => void\n  'data-testid'?: string\n}\n\nconst StyledCodeBlock = styled.pre`\n  background-color: ${color.background.subtle};\n  border: ${border.subtle};\n  border-radius: ${tokens.base.border.radius[2]};\n  padding: ${spacing.layout.md};\n  font-family: ${tokens.base.fontFamily.monospace};\n  font-size: ${tokens.base.fontSize[1]};\n  line-height: ${tokens.base.lineHeight[3]};\n  color: ${color.text.default};\n  overflow-x: auto;\n  margin: ${spacing.layout.sm} 0;\n  position: relative;\n`\n\nconst CodeBlockWrapper = styled.div`\n  position: relative;\n  display: inline-block;\n  width: 100%;\n`\n\nconst CopyButtonWrapper = styled.div`\n  position: absolute;\n  bottom: ${spacing.layout.lg};\n  right: ${spacing.layout.sm};\n`\n\nconst CopyButton: React.FC<{ text: string; onCopy?: () => void }> = ({ text, onCopy }) => {\n  const [copied, setCopied] = useState(false)\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null)\n  \n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(text)\n      setCopied(true)\n      onCopy?.()\n      \n      // Clear any existing timeout\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n      \n      // Set new timeout\n      timeoutRef.current = setTimeout(() => {\n        setCopied(false)\n        timeoutRef.current = null\n      }, 2000)\n    } catch (err) {\n      console.error('Failed to copy text: ', err)\n    }\n  }\n  \n  // Cleanup timeout on unmount\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current)\n      }\n    }\n  }, [])\n  \n  return (\n    <CopyButtonWrapper>\n      <Button \n        variant=\"secondary\" \n        size=\"small\" \n        iconName=\"copy\"\n        onClick={handleCopy}\n        data-testid=\"copy-button\"\n      >\n        {copied ? 'Copied!' : 'Copy'}\n      </Button>\n    </CopyButtonWrapper>\n  )\n}\n\n/**\n * CodeBlock component for displaying formatted code with optional copy functionality\n * \n * @param children - The code content to display\n * @param showCopyButton - Whether to show the copy button (default: true)\n * @param onCopy - Optional callback when code is copied\n * @param data-testid - Test identifier for the code block\n */\nexport const CodeBlock: React.FC<CodeBlockProps> = ({ \n  children, \n  showCopyButton = true, \n  onCopy, \n  'data-testid': testId \n}) => {\n  return (\n    <CodeBlockWrapper>\n      <StyledCodeBlock data-testid={testId}>\n        {children}\n      </StyledCodeBlock>\n      {showCopyButton && (\n        <CopyButton text={children} onCopy={onCopy} />\n      )}\n    </CodeBlockWrapper>\n  )\n}\n\nexport default CodeBlock\n"]}