{"version":3,"file":"Badge.jsx","sourceRoot":"","sources":["Badge.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport tokens from '@/styles/tokens.json'\nimport { Typography } from '../Typography'\n\nconst { semantic: { color }, base: { shadow } } = tokens\n\nexport interface BadgeProps {\n  /** Content to wrap with the badge */\n  children: React.ReactNode\n  /** Number to display in the badge. If 0, badge is hidden */\n  count?: number\n  /** Maximum number to display before showing \"99+\" */\n  max?: number\n  /** Visual variant of the badge */\n  variant?: 'default' | 'primary' | 'error' | 'warning' | 'success'\n  /** Show only a dot indicator instead of count */\n  dot?: boolean\n  /** Screen reader label for the badge */\n  'aria-label'?: string\n  /** Additional CSS class */\n  className?: string\n}\n\nconst scaleIn = keyframes`\n  from {\n    transform: scale(0.8);\n    opacity: 0;\n  }\n  to {\n    transform: scale(1);\n    opacity: 1;\n  }\n`\n\nconst BadgeWrapper = styled.span`\n  position: relative;\n  display: inline-flex;\n  vertical-align: middle;\n  flex-shrink: 0;\n`\n\nconst BadgeIndicator = styled.span.withConfig({\n  shouldForwardProp: (prop) => !prop.startsWith('$')\n})<{ $variant: string; $isDot: boolean; $isVisible: boolean }>`\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(50%, -50%);\n  display: ${props => props.$isVisible ? 'flex' : 'none'};\n  align-items: center;\n  justify-content: center;\n  min-width: ${props => props.$isDot ? '8px' : '16px'};\n  height: ${props => props.$isDot ? '8px' : '16px'};\n  padding: ${props => props.$isDot ? '0' : '0 4px'};\n  border-radius: ${tokens.base.border.radius.circle};\n  line-height: 1;\n  white-space: nowrap;\n  box-shadow: 0 0 0 2px ${color.background.default};\n  animation: ${scaleIn} 0.2s ease-out;\n  \n  ${props => {\n    switch (props.$variant) {\n      case 'primary':\n        return `\n          background-color: ${color.background.interactive};\n          color: ${color.text.inverse};\n        `\n      case 'error':\n        return `\n          background-color: ${color.background.error};\n          color: ${color.text.inverse};\n        `\n      case 'warning':\n        return `\n          background-color: ${color.background.warning};\n          color: ${color.text.inverse};\n        `\n      case 'success':\n        return `\n          background-color: ${color.background.success};\n          color: ${color.text.inverse};\n        `\n      default:\n        return `\n          background-color: ${color.background.emphasis};\n          color: ${color.text.inverse};\n        `\n    }\n  }}\n`\n\nconst ScreenReaderOnly = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  border-width: 0;\n`\n\nexport const Badge: React.FC<BadgeProps> = ({\n  children,\n  count = 0,\n  max = 99,\n  variant = 'default',\n  dot = false,\n  'aria-label': ariaLabel,\n  className\n}) => {\n  const isVisible = dot || count > 0\n  const displayCount = count > max ? `${max}+` : count.toString()\n  \n  // Generate default aria-label if not provided\n  const defaultAriaLabel = dot \n    ? 'New notification indicator'\n    : count === 1 \n      ? '1 notification' \n      : `${count} notifications`\n  \n  const label = ariaLabel || defaultAriaLabel\n\n  return (\n    <BadgeWrapper className={className}>\n      {children}\n      <BadgeIndicator\n        $variant={variant}\n        $isDot={dot}\n        $isVisible={isVisible}\n        role=\"status\"\n        aria-live=\"polite\"\n      >\n        {!dot && (\n          <Typography variant=\"caption\" color=\"inverse\">\n            {displayCount}\n          </Typography>\n        )}\n        <ScreenReaderOnly>{label}</ScreenReaderOnly>\n      </BadgeIndicator>\n    </BadgeWrapper>\n  )\n}\n"]}