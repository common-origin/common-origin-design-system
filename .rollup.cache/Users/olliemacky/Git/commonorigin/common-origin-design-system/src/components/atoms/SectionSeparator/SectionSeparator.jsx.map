{"version":3,"file":"SectionSeparator.jsx","sourceRoot":"","sources":["SectionSeparator.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,MAAM,MAAM,mBAAmB,CAAA;AACtC,OAAO,MAAM,MAAM,sBAAsB,CAAA;AAgBzC,IAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;IAC5C,iBAAiB,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,EAArB,CAAqB;CACnD,CAAC,mMAAsB,mFAKpB,EAUD,qCAGC,EAiBD,IACF;IAED;;;;;;;;;;;;;;;OAeG;KAhDC,UAAC,EAAwB;QAAtB,gBAAoB,EAApB,QAAQ,mBAAG,SAAS,KAAA;IACvB,QAAQ,QAAQ,EAAE;QAChB,KAAK,QAAQ;YACX,OAAO,sBAAe,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,MAAG,CAAA;QAC5E,KAAK,SAAS;YACZ,OAAO,sBAAe,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,MAAG,CAAA;QAC7E,KAAK,SAAS,CAAC;QACf;YACE,OAAO,sBAAe,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,MAAG,CAAA;KAC9E;AACH,CAAC,EAGC,UAAC,EAAyC;QAAvC,aAAe,EAAf,KAAK,mBAAG,OAAO,KAAA,EAAE,gBAAoB,EAApB,QAAQ,mBAAG,SAAS,KAAA;IACxC,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,qDAAqD;QACrD,OAAO,kBAAW,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,MAAG,CAAA;KACxE;IAED,QAAQ,KAAK,EAAE;QACb,KAAK,OAAO;YACV,OAAO,kBAAW,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,MAAG,CAAA;QACpE,KAAK,QAAQ;YACX,OAAO,kBAAW,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,MAAG,CAAA;QACrE,KAAK,QAAQ;YACX,OAAO,kBAAW,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,MAAG,CAAA;QACrE,KAAK,OAAO,CAAC;QACb;YACE,OAAO,kBAAW,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,MAAM,MAAG,CAAA;KACrE;AACH,CAAC,CACF,CAAA;AAED;;;;;;;;;;;;;;;GAeG;AACH,MAAM,CAAC,IAAM,gBAAgB,GAAoC,UAAC,EAIjE;QAHC,eAAmB,EAAnB,OAAO,mBAAG,SAAS,KAAA,EACnB,YAAc,EAAd,IAAI,mBAAG,OAAO,KAAA,EACC,UAAU,oBAAA;IAEzB,OAAO,CACL,CAAC,eAAe,CACd,QAAQ,CAAC,CAAC,OAAO,CAAC,CAClB,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,WAAW,CAAC,CAAC,UAAU,CAAC,CACxB,IAAI,CAAC,WAAW,CAChB,gBAAgB,CAAC,YAAY,EAC7B,CACH,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport tokens from '@/styles/tokens.json'\n\nexport interface SectionSeparatorProps {\n  /** Variant style of the separator */\n  variant?: 'default' | 'strong' | 'minimal'\n  /** Size variation affecting spacing */\n  size?: 'small' | 'medium' | 'large' | 'xlarge'\n  /** Data test id for testing */\n  'data-testid'?: string\n}\n\ninterface StyledSeparatorProps {\n  $variant: SectionSeparatorProps['variant']\n  $size: SectionSeparatorProps['size']\n}\n\nconst StyledSeparator = styled.div.withConfig({\n  shouldForwardProp: (prop) => !prop.startsWith('$')\n})<StyledSeparatorProps>`\n  border: none;\n  border-top: 1px solid;\n  \n  /* Apply variant styles */\n  ${({ $variant = 'default' }) => {\n    switch ($variant) {\n      case 'strong':\n        return `border-top: ${tokens.component.separator.variants.strong.border};`\n      case 'minimal':\n        return `border-top: ${tokens.component.separator.variants.minimal.border};`\n      case 'default':\n      default:\n        return `border-top: ${tokens.component.separator.variants.default.border};`\n    }\n  }}\n  \n  /* Apply size styles */\n  ${({ $size = 'large', $variant = 'default' }) => {\n    if ($variant === 'minimal') {\n      // Minimal variant always uses its predefined spacing\n      return `margin: ${tokens.component.separator.variants.minimal.margin};`\n    }\n    \n    switch ($size) {\n      case 'small':\n        return `margin: ${tokens.component.separator.sizes.small.margin};`\n      case 'medium':\n        return `margin: ${tokens.component.separator.sizes.medium.margin};`\n      case 'xlarge':\n        return `margin: ${tokens.component.separator.sizes.xlarge.margin};`\n      case 'large':\n      default:\n        return `margin: ${tokens.component.separator.sizes.large.margin};`\n    }\n  }}\n`\n\n/**\n * SectionSeparator is an atomic component that provides visual separation between content sections.\n * \n * Features:\n * - Multiple variants (default, strong, minimal)\n * - Size variations for different spacing needs\n * - Semantic token usage for consistent styling\n * - Full accessibility support\n * \n * @example\n * ```tsx\n * <SectionSeparator />\n * <SectionSeparator variant=\"strong\" size=\"xlarge\" />\n * <SectionSeparator variant=\"minimal\" />\n * ```\n */\nexport const SectionSeparator: React.FC<SectionSeparatorProps> = ({\n  variant = 'default',\n  size = 'large',\n  'data-testid': dataTestId,\n}) => {\n  return (\n    <StyledSeparator\n      $variant={variant}\n      $size={size}\n      data-testid={dataTestId}\n      role=\"separator\"\n      aria-orientation=\"horizontal\"\n    />\n  )\n}\n"]}