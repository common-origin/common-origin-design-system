{"version":3,"file":"ArtCard.jsx","sourceRoot":"","sources":["ArtCard.tsx"],"names":[],"mappings":";AAAA,OAAO,MAAM,MAAM,mBAAmB,CAAA;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAA;AACvC,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAA;AAC7C,OAAO,EAAE,KAAK,EAAE,MAAM,mBAAmB,CAAA;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAA;AACnD,OAAO,MAAM,MAAM,sBAAsB,CAAA;AAEzB,IAAA,MAAM,GAAO,MAAM,YAAb,CAAa;AAanC,IAAM,aAAa,GAAG,MAAM,CAAC,GAAG,iSAAA,4JAcX,EAAgB,gEAIpC,KAJoB,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAIpC,CAAA;AAED,MAAM,CAAC,IAAM,OAAO,GAAG,UAAC,EAST;QARb,KAAK,WAAA,EACL,OAAO,aAAA,EACP,GAAG,SAAA,EACH,MAAM,YAAA,EACN,MAAM,YAAA,EACN,UAAU,gBAAA,EACV,YAAY,kBAAA,EACZ,SAAS,eAAA;IAET,IAAI,GAAG,KAAK,KAAK,EAAE;QACjB,OAAO,CACL,EACE;QAAA,CAAC,aAAa,CACZ;UAAA,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAChC;YAAA,CAAC,OAAO,CACN,KAAK,CAAC,CAAC,KAAK,CAAC,CACb,GAAG,CAAC,CAAC,UAAU,CAAC,CAChB,OAAO,CAAC,CAAC,YAAY,CAAC,CACtB,IAAI,CAAC,CAAC,SAAS,CAAC,EAElB;YAAA,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,cAAc,CAAC,eAAe,CAAC,GAAG,CAAC,IAAI,CACpF;cAAA,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAChC;gBAAA,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC,EAAE,UAAU,CAC5C;gBAAA,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,MAAM,CAAC,EAAE,UAAU,CAClE;cAAA,EAAE,KAAK,CACP;cAAA,CAAC,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CACjD;gBAAA,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,MAAM,CAAC,GAAG,CAAC,UAAC,KAAK,EAAE,KAAK,IAAK,OAAA,CACrD,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,SAAS,EAAG,CACrD,EAFsD,CAEtD,CAAC,CACJ;cAAA,EAAE,KAAK,CACT;YAAA,EAAE,KAAK,CACT;UAAA,EAAE,KAAK,CACT;QAAA,EAAE,aAAa,CACjB;MAAA,GAAG,CACJ,CAAA;KACF;IAED,OAAO,IAAI,CAAA;AACb,CAAC,CAAA","sourcesContent":["import styled from 'styled-components'\nimport { Chip } from '../../atoms/Chip'\nimport { Picture } from '../../atoms/Picture'\nimport { Stack } from '../../atoms/Stack'\nimport { Typography } from '../../atoms/Typography'\nimport tokens from '@/styles/tokens.json'\n\nconst { base: { border } } = tokens\n\nexport type ArtCardProps = {\n  title: string\n  excerpt: string\n  tag: string\n  artist: string\n  labels: string[]\n  coverImage: string\n  onImageClick?: () => void\n  imageHref?: string\n}\n\nconst ArtCardStyled = styled.div`\n  max-width: 768px;\n\n  a {\n    text-decoration: none;\n  }\n\n  &:hover {\n    img {\n      opacity: 0.8;\n    }\n  }\n\n  img {\n    border-radius: ${border.radius[6]};\n    transition: ease opacity 0.2s;\n    width: 100%;\n  }\n`\n\nexport const ArtCard = ({\n  title,\n  excerpt,\n  tag,\n  artist,\n  labels,\n  coverImage,\n  onImageClick,\n  imageHref,\n}: ArtCardProps) => {\n  if (tag === 'art') {\n    return (\n      <>\n        <ArtCardStyled>\n          <Stack direction=\"column\" gap=\"md\">\n            <Picture \n              title={title} \n              src={coverImage} \n              onClick={onImageClick}\n              href={imageHref}\n            />\n            <Stack direction=\"row\" alignItems=\"flex-start\" justifyContent=\"space-between\" gap=\"xs\">\n              <Stack direction=\"column\" gap=\"xs\">\n                <Typography variant=\"h6\">{title}</Typography>\n                <Typography variant=\"small\" color=\"subdued\">{artist}</Typography>\n              </Stack>\n              <Stack direction=\"row\" alignItems=\"center\" gap=\"xs\">\n                {Array.isArray(labels) && labels.map((label, index) => (\n                  <Chip key={index} title={label} variant=\"default\" />\n                ))}\n              </Stack>\n            </Stack>\n          </Stack>\n        </ArtCardStyled>\n      </>\n    )\n  }\n  \n  return null\n}\n"]}