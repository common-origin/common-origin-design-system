{"version":3,"file":"Avatar.jsx","sourceRoot":"","sources":["Avatar.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,OAAO,CAAA;AACvC,OAAO,MAAM,MAAM,mBAAmB,CAAA;AACtC,OAAO,MAAM,MAAM,sBAAsB,CAAA;AAazC,IAAM,eAAe,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;IAC5C,iBAAiB,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAzB,CAAyB;CACvD,CAAC,uSAAmB,iHAKV,EAAiD,eAChD,EAAiD,sBAC1C,EAAgC,yBAC7B,EAAuC,6CAG5D,KANU,UAAC,EAAS;QAAP,KAAK,WAAA;IAAO,OAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAAlC,CAAkC,EAChD,UAAC,EAAS;QAAP,KAAK,WAAA;IAAO,OAAA,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC;AAAlC,CAAkC,EAC1C,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAC7B,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAG5D,CAAA;AAED,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;IACxC,iBAAiB,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAzB,CAAyB;CACvD,CAAC,gOAAmB,4EAIF,EAAgC,+EAElD,KAFkB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAElD,CAAA;AAED,IAAM,cAAc,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC;IAC5C,iBAAiB,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAzB,CAAyB;CACvD,CAAC,8NAAmB,mBACJ,EAA2B,oBAC3B,EAAyB,kBAC3B,EASZ,cACQ,EAAkC,4EAI5C;IAED,4CAA4C;KAlB3B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,EAC3B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAC3B,UAAC,EAAS;QAAP,KAAK,WAAA;IACnB,IAAM,OAAO,GAAG;QACd,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;QAC3B,EAAE,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC5B,CAAA;IACD,OAAO,OAAO,CAAC,KAAK,CAAC,CAAA;AACvB,CAAC,EACQ,MAAM,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAI5C,CAAA;AAED,4CAA4C;AAC5C,IAAM,WAAW,GAAG,UAAC,IAAY;IAC/B,OAAO,IAAI;SACR,KAAK,CAAC,GAAG,CAAC;SACV,GAAG,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC;SAC3B,IAAI,CAAC,EAAE,CAAC;SACR,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;SACX,WAAW,EAAE,CAAA;AAClB,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,MAAM,GAA0B,UAAC,EAM7C;IALC,IAAA,IAAI,UAAA,EACJ,OAAO,aAAA,EACP,YAAW,EAAX,IAAI,mBAAG,IAAI,KAAA,EACI,UAAU,oBAAA,EACtB,KAAK,cALoC,0CAM7C,CADS;IAER,yCAAyC;IACzC,IAAM,KAA0B,KAA4B,EAApD,KAAK,WAAA,EAAK,SAAS,cAArB,SAAuB,CAA+B,CAAA;IACtD,IAAA,KAA8B,QAAQ,CAAC,KAAK,CAAC,EAA5C,UAAU,QAAA,EAAE,aAAa,QAAmB,CAAA;IAC7C,IAAA,KAAgC,QAAQ,CAAC,KAAK,CAAC,EAA9C,WAAW,QAAA,EAAE,cAAc,QAAmB,CAAA;IAErD,IAAM,gBAAgB,GAAG;QACvB,aAAa,CAAC,IAAI,CAAC,CAAA;IACrB,CAAC,CAAA;IAED,IAAM,eAAe,GAAG;QACtB,cAAc,CAAC,IAAI,CAAC,CAAA;IACtB,CAAC,CAAA;IAED,IAAM,SAAS,GAAG,OAAO,IAAI,CAAC,UAAU,CAAA;IACxC,IAAM,QAAQ,GAAG,WAAW,CAAC,IAAI,CAAC,CAAA;IAElC,OAAO,CACL,CAAC,eAAe,CACd,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,WAAW,CAAC,CAAC,UAAU,CAAC,CACxB,SAAS,CAAC,CAAC,IAAI,CAAC,CAChB,IAAI,CAAC,KAAK,CACV,UAAU,CAAC,CAAC,qBAAc,IAAI,CAAE,CAAC,CACjC,IAAI,SAAS,CAAC,CAEd;MAAA,CAAC,SAAS,CAAC,CAAC,CAAC,CACX,CAAC,WAAW,CACV,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,GAAG,CAAC,CAAC,OAAO,CAAC,CACb,GAAG,CAAC,CAAC,oBAAa,IAAI,CAAE,CAAC,CACzB,OAAO,CAAC,CAAC,gBAAgB,CAAC,CAC1B,MAAM,CAAC,CAAC,eAAe,CAAC,CACxB,UAAU,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,EAC/C,CACH,CAAC,CAAC,CAAC,CACF,CAAC,cAAc,CACb,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,aAAa,CAAC,CAAC,QAAQ,CAAC,CACxB,WAAW,CAAC,MAAM,CAElB;UAAA,CAAC,QAAQ,CACX;QAAA,EAAE,cAAc,CAAC,CAClB,CACH;IAAA,EAAE,eAAe,CAAC,CACnB,CAAA;AACH,CAAC,CAAA","sourcesContent":["import React, { useState } from 'react'\nimport styled from 'styled-components'\nimport tokens from '@/styles/tokens.json'\n\nexport interface AvatarProps {\n  name: string\n  picture?: string\n  size?: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n  'data-testid'?: string\n}\n\ninterface StyledAvatarProps {\n  $size: 'xs' | 'sm' | 'md' | 'lg' | 'xl'\n}\n\nconst AvatarContainer = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['$size'].includes(prop),\n})<StyledAvatarProps>`\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: ${({ $size }) => tokens.semantic.size.avatar[$size]};\n  height: ${({ $size }) => tokens.semantic.size.avatar[$size]};\n  border-radius: ${tokens.base.border.radius.circle};\n  background-color: ${tokens.semantic.color.background.subtle};\n  overflow: hidden;\n  flex-shrink: 0;\n`\n\nconst AvatarImage = styled.img.withConfig({\n  shouldForwardProp: (prop) => !['$size'].includes(prop),\n})<StyledAvatarProps>`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n  border-radius: ${tokens.base.border.radius.circle};\n  /* Remove the img role since the container already has role=\"img\" */\n`\n\nconst AvatarInitials = styled.span.withConfig({\n  shouldForwardProp: (prop) => !['$size'].includes(prop),\n})<StyledAvatarProps>`\n  font-family: ${tokens.base.fontFamily.body};\n  font-weight: ${tokens.base.fontWeight[3]};\n  font-size: ${({ $size }) => {\n    const sizeMap = {\n      xs: tokens.base.fontSize[1],\n      sm: tokens.base.fontSize[2],\n      md: tokens.base.fontSize[3],\n      lg: tokens.base.fontSize[4],\n      xl: tokens.base.fontSize[5]\n    }\n    return sizeMap[$size]\n  }};\n  color: ${tokens.semantic.color.text.default};\n  line-height: 1;\n  text-transform: uppercase;\n  user-select: none;\n`\n\n// Helper function to get initials from name\nconst getInitials = (name: string): string => {\n  return name\n    .split(' ')\n    .map(word => word.charAt(0))\n    .join('')\n    .slice(0, 2)\n    .toUpperCase()\n}\n\nexport const Avatar: React.FC<AvatarProps> = ({ \n  name, \n  picture, \n  size = 'md',\n  'data-testid': dataTestId,\n  ...props \n}) => {\n  // Remove styled-only props from the rest\n  const { $size, ...htmlProps } = props as Record<string, any>\n  const [imageError, setImageError] = useState(false)\n  const [imageLoaded, setImageLoaded] = useState(false)\n\n  const handleImageError = () => {\n    setImageError(true)\n  }\n\n  const handleImageLoad = () => {\n    setImageLoaded(true)\n  }\n\n  const showImage = picture && !imageError\n  const initials = getInitials(name)\n\n  return (\n    <AvatarContainer \n      $size={size}\n      data-testid={dataTestId}\n      data-size={size}\n      role=\"img\"\n      aria-label={`Avatar for ${name}`}\n      {...htmlProps}\n    >\n      {showImage ? (\n        <AvatarImage\n          $size={size}\n          src={picture}\n          alt={`Avatar of ${name}`}\n          onError={handleImageError}\n          onLoad={handleImageLoad}\n          data-state={imageLoaded ? 'loaded' : 'loading'}\n        />\n      ) : (\n        <AvatarInitials \n          $size={size}\n          data-initials={initials}\n          aria-hidden=\"true\"\n        >\n          {initials}\n        </AvatarInitials>\n      )}\n    </AvatarContainer>\n  )\n}"]}