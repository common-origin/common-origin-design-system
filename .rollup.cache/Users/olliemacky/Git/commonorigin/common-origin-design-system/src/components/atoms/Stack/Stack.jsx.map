{"version":3,"file":"Stack.jsx","sourceRoot":"","sources":["Stack.tsx"],"names":[],"mappings":";AAAA,OAAO,KAAK,MAAM,OAAO,CAAA;AACzB,OAAO,MAAM,MAAM,mBAAmB,CAAA;AACtC,OAAO,MAAM,MAAM,sBAAsB,CAAA;AAyBzC,IAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,UAAU,CAAC;IACxC,iBAAiB,EAAE,UAAC,IAAI,IAAK,OAAA,CAAC,CAAC,YAAY,EAAE,MAAM,EAAE,aAAa,EAAE,iBAAiB,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAjF,CAAiF;CAC/G,CAAC,oMAAkB,wCAEA,EAA8B,oBACjC,EAA6C,wBACzC,EAAqD,YACjE,EAAkB,kBACZ,EAAwC,KACtD;IAED,mDAAmD;KAP/B,UAAC,EAAc;QAAZ,UAAU,gBAAA;IAAO,OAAA,UAAU;AAAV,CAAU,EACjC,UAAC,EAAe;QAAb,WAAW,iBAAA;IAAO,OAAA,WAAW,IAAI,SAAS;AAAxB,CAAwB,EACzC,UAAC,EAAmB;QAAjB,eAAe,qBAAA;IAAO,OAAA,eAAe,IAAI,SAAS;AAA5B,CAA4B,EACjE,UAAC,EAAQ;QAAN,IAAI,UAAA;IAAO,OAAA,IAAI;AAAJ,CAAI,EACZ,UAAC,EAAS;QAAP,KAAK,WAAA;IAAO,OAAA,KAAK,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,QAAQ;AAAzB,CAAyB,CACtD,CAAA;AAED,mDAAmD;AACnD,IAAM,WAAW,GAAG,UAAC,GAAa;IAChC,oCAAoC;IACpC,IAAM,eAAe,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAgC,CAAA;IAEhF,IAAI,GAAG,IAAI,eAAe,EAAE;QAC1B,OAAO,eAAe,CAAC,GAAmC,CAAC,CAAA;KAC5D;IAED,uDAAuD;IACvD,OAAO,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAA;AAC1C,CAAC,CAAA;AAED,MAAM,CAAC,IAAM,KAAK,GAAyB,UAAC,EAQ3C;QAPC,QAAQ,cAAA,EACR,iBAAiB,EAAjB,SAAS,mBAAG,KAAK,KAAA,EACjB,WAAU,EAAV,GAAG,mBAAG,IAAI,KAAA,EACV,UAAU,gBAAA,EACV,cAAc,oBAAA,EACd,YAAY,EAAZ,IAAI,mBAAG,KAAK,KAAA,EACG,UAAU,oBAAA;IAEzB,IAAM,QAAQ,GAAG,WAAW,CAAC,GAAG,CAAC,CAAA;IAEjC,OAAO,CACL,CAAC,WAAW,CACV,UAAU,CAAC,CAAC,SAAS,CAAC,CACtB,IAAI,CAAC,CAAC,QAAQ,CAAC,CACf,WAAW,CAAC,CAAC,UAAU,CAAC,CACxB,eAAe,CAAC,CAAC,cAAc,CAAC,CAChC,KAAK,CAAC,CAAC,IAAI,CAAC,CACZ,WAAW,CAAC,CAAC,UAAU,CAAC,CAExB;MAAA,CAAC,QAAQ,CACX;IAAA,EAAE,WAAW,CAAC,CACf,CAAA;AACH,CAAC,CAAA;AAED,eAAe,KAAK,CAAA","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport tokens from '@/styles/tokens.json'\n\nexport type StackDirection = 'column' | 'row'\nexport type StackAlign = 'center' | 'flex-start' | 'flex-end' | 'stretch' | 'baseline'\nexport type StackJustify = 'center' | 'flex-start' | 'flex-end' | 'space-between' | 'space-around' | 'space-evenly'\nexport type StackGap = 'none' | 'xs' | 'sm' | 'md' | 'lg' | 'xl' | '2xl' | '3xl' | '4xl' | '5xl' | '6xl'\n\nexport interface StackProps {\n  children: React.ReactNode\n  direction?: StackDirection\n  alignItems?: StackAlign\n  justifyContent?: StackJustify\n  gap?: StackGap\n  wrap?: boolean\n  'data-testid'?: string\n}\n\ninterface StyledStackProps {\n  $direction: StackDirection\n  $alignItems?: StackAlign\n  $justifyContent?: StackJustify\n  $gap: string\n  $wrap: boolean\n}\n\nconst StyledStack = styled.div.withConfig({\n  shouldForwardProp: (prop) => !['$direction', '$gap', '$alignItems', '$justifyContent', '$wrap'].includes(prop),\n})<StyledStackProps>`\n  display: flex;\n  flex-direction: ${({ $direction }) => $direction};\n  align-items: ${({ $alignItems }) => $alignItems || 'initial'};\n  justify-content: ${({ $justifyContent }) => $justifyContent || 'initial'};\n  gap: ${({ $gap }) => $gap};\n  flex-wrap: ${({ $wrap }) => $wrap ? 'wrap' : 'nowrap'};\n`\n\n// Helper function to convert gap prop to CSS value\nconst getGapValue = (gap: StackGap): string => {\n  // Get semantic layout spacing token\n  const semanticSpacing = tokens.semantic.spacing.layout as Record<string, string>\n  \n  if (gap in semanticSpacing) {\n    return semanticSpacing[gap as keyof typeof semanticSpacing]\n  }\n  \n  // Fallback to medium layout spacing if token not found\n  return tokens.semantic.spacing.layout.md\n}\n\nexport const Stack: React.FC<StackProps> = ({ \n  children, \n  direction = 'row', \n  gap = 'md', \n  alignItems, \n  justifyContent,\n  wrap = false,\n  'data-testid': dataTestId\n}) => {\n  const gapValue = getGapValue(gap)\n  \n  return (\n    <StyledStack \n      $direction={direction} \n      $gap={gapValue} \n      $alignItems={alignItems} \n      $justifyContent={justifyContent}\n      $wrap={wrap}\n      data-testid={dataTestId}\n    >\n      {children}\n    </StyledStack>\n  )\n}\n\nexport default Stack\n"]}