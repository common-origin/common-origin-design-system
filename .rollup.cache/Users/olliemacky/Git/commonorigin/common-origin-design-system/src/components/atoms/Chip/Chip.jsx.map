{"version":3,"file":"Chip.jsx","sourceRoot":"","sources":["Chip.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport tokens from '@/styles/tokens.json'\n\nconst { component: { chip } } = tokens\n\n// Props interface with improved naming and additional options\nexport interface ChipProps {\n  children?: React.ReactNode\n  variant?: 'default' | 'emphasis' | 'subtle' | 'interactive' | 'light' | 'dark'\n  size?: 'small' | 'medium' | 'large'\n  onClick?: () => void\n  disabled?: boolean\n  'data-testid'?: string\n  // Additional accessibility props\n  'aria-label'?: string\n  'aria-describedby'?: string\n  role?: string\n  \n  // Legacy API support\n  title?: string\n}\n\n// Internal props for styled components - no $ prefix needed\ninterface InternalStyledProps {\n  variant: 'default' | 'emphasis' | 'subtle' | 'interactive'\n  size: ChipProps['size']\n  disabled?: boolean\n  clickable?: boolean\n}\n\n// Dynamic variant styles using component tokens\nconst getVariantStyles = ({ variant }: InternalStyledProps) => {\n  switch (variant) {\n    case 'emphasis':\n      return `\n        background-color: ${chip.variants.emphasis.backgroundColor};\n        color: ${chip.variants.emphasis.textColor};\n      `\n    case 'subtle':\n      return `\n        background-color: ${chip.variants.subtle.backgroundColor};\n        color: ${chip.variants.subtle.textColor};\n      `\n    case 'interactive':\n      return `\n        background-color: ${chip.variants.interactive.backgroundColor};\n        color: ${chip.variants.interactive.textColor};\n      `\n    case 'default':\n    default:\n      return `\n        background-color: ${chip.default.backgroundColor};\n        color: ${chip.default.textColor};\n      `\n  }\n}\n\n// Dynamic size styles using component tokens\nconst getSizeStyles = ({ size }: InternalStyledProps) => {\n  switch (size) {\n    case 'small':\n      return `\n        font: ${chip.sizes.small.font};\n        padding: ${chip.sizes.small.padding};\n      `\n    case 'large':\n      return `\n        font: ${chip.sizes.large.font};\n        padding: ${chip.sizes.large.padding};\n      `\n    case 'medium':\n    default:\n      return `\n        font: ${chip.sizes.medium.font};\n        padding: ${chip.sizes.medium.padding};\n      `\n  }\n}\n\n// Base styled component that only receives styling props\nconst BaseChip = styled.span.withConfig({\n  shouldForwardProp: (prop) => {\n    // Explicitly list props that should NOT be forwarded to the DOM\n    const excludedProps = ['variant', 'size', 'disabled', 'clickable']\n    return !excludedProps.includes(prop as string)\n  }\n})<InternalStyledProps>`\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: fit-content;\n  height: max-content;\n  border-radius: ${chip.default.borderRadius};\n  box-sizing: border-box;\n  user-select: none;\n  white-space: nowrap;\n  transition: ${tokens.semantic.motion.interactive};\n  \n  ${getVariantStyles}\n  ${getSizeStyles}\n  \n  ${({ clickable, disabled }) => {\n    if (disabled) {\n      return `\n        opacity: 0.6;\n        cursor: not-allowed;\n      `\n    }\n    if (clickable) {\n      return `\n        cursor: pointer;\n        \n        &:hover {\n          opacity: 0.8;\n        }\n        \n        &:active {\n          opacity: 0.9;\n        }\n      `\n    }\n    return ''\n  }}\n  \n  &:focus-visible {\n    outline: 2px solid ${chip.variants.interactive.backgroundColor};\n    outline-offset: 2px;\n  }\n`\n\n// Wrapper component that handles prop filtering\nconst StyledChip: React.FC<React.PropsWithChildren<InternalStyledProps & React.HTMLAttributes<HTMLSpanElement>>> = ({\n  variant,\n  size,\n  disabled,\n  clickable,\n  children,\n  ...htmlProps\n}) => {\n  // Filter out any remaining non-HTML props to ensure they don't reach the DOM\n  const { ...cleanHtmlProps } = htmlProps\n  \n  return (\n    <BaseChip\n      variant={variant}\n      size={size}\n      disabled={disabled}\n      clickable={clickable}\n      {...cleanHtmlProps}\n    >\n      {children}\n    </BaseChip>\n  )\n}\n\nexport const Chip: React.FC<ChipProps> = ({\n  children,\n  variant = 'default',\n  size = 'medium',\n  onClick,\n  disabled = false,\n  'data-testid': dataTestId,\n  'aria-label': ariaLabel,\n  'aria-describedby': ariaDescribedBy,\n  role,\n  title, // Legacy prop support\n  ...props\n}) => {\n  const isClickable = Boolean(onClick && !disabled)\n  \n  // Map legacy variants to new variants for backward compatibility\n  const normalizedVariant: 'default' | 'emphasis' | 'subtle' | 'interactive' = \n    variant === 'light' ? 'default' :\n    variant === 'dark' ? 'emphasis' :\n    variant as 'default' | 'emphasis' | 'subtle' | 'interactive'\n  \n  // Support legacy title prop - prioritize children over title\n  const content = children !== undefined ? children : title\n  \n  // Remove styled-only props from the rest\n  const { variant: _v, size: _s, disabled: _d, clickable: _c, ...htmlProps } = props as Record<string, any>\n  const handleClick = () => {\n    if (onClick && !disabled) {\n      onClick()\n    }\n  }\n  \n  const handleKeyDown = (event: React.KeyboardEvent) => {\n    if (isClickable && (event.key === 'Enter' || event.key === ' ')) {\n      event.preventDefault()\n      handleClick()\n    }\n  }\n  \n  return (\n    <StyledChip\n      variant={normalizedVariant}\n      size={size}\n      disabled={disabled}\n      clickable={isClickable}\n      onClick={isClickable ? handleClick : undefined}\n      onKeyDown={isClickable ? handleKeyDown : undefined}\n      tabIndex={isClickable ? 0 : undefined}\n      role={role || (isClickable ? 'button' : undefined)}\n      aria-label={ariaLabel}\n      aria-describedby={ariaDescribedBy}\n      aria-disabled={disabled ? 'true' : undefined}\n      data-testid={dataTestId}\n      {...htmlProps}\n    >\n      {content}\n    </StyledChip>\n  )\n}\n\n// Legacy props support for backward compatibility\nexport interface LegacyChipProps {\n  title: string\n  variant?: 'light' | 'dark'\n}\n\n// Legacy component for backward compatibility\nexport const LegacyChip: React.FC<LegacyChipProps> = ({ title, variant = 'light' }) => {\n  // Map legacy variants to new variants\n  const newVariant = variant === 'dark' ? 'emphasis' : 'default'\n  \n  return (\n    <Chip variant={newVariant}>\n      {title}\n    </Chip>\n  )\n}\n"]}