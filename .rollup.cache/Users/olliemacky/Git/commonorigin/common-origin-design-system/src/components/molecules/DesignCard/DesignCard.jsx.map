{"version":3,"file":"DesignCard.jsx","sourceRoot":"","sources":["DesignCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react'\nimport styled from 'styled-components'\nimport { Chip, Button, CoverImage, DateFormatter, SectionSeparator, Stack, Typography } from '@/components'\nimport tokens from '@/styles/tokens.json'\n\nconst { base: { spacing, border } } = tokens\n\nexport type DesignCardProps = {\n  title: string\n  excerpt: string\n  labels: string[]\n  tag: string\n  coverImage: string\n  date: string\n  slug?: string\n}\n\nconst DesignCardStyled = styled.div`\n  @media (min-width: ${tokens.base.breakpoint.md}) {\n    display: grid;\n    grid-template-columns: repeat(12, 1fr);\n  }\n\n  @media (min-width: ${tokens.base.breakpoint.lg}) {\n    gap: ${spacing[12]};\n  }\n\n  img {\n    border-radius: ${border.radius[6]};\n    transition: ease opacity 0.2s;\n\n    &:hover {\n      opacity: 0.8;\n    }\n  }\n\n  a {\n    text-decoration: none;\n  }\n`\n\nconst ImageWrapper = styled.div`\n  grid-column: span 12;\n\n  @media (min-width: ${tokens.base.breakpoint.lg}) {\n    grid-column: span 6;\n  }\n`\n\nconst ContentSection = styled.div`\n  grid-column: span 12;\n  margin-top: ${spacing[6]};\n\n  @media (min-width: ${tokens.base.breakpoint.lg}) {\n    grid-column: span 6;\n    margin-top: 0;\n    padding-right: ${spacing[8]};\n  }\n\n  @media (min-width: ${tokens.base.breakpoint.xl}) {\n    padding-right: ${spacing[24]};\n  }\n`\n\nconst ButtonWrapper = styled.div`\n  button {\n    margin-top: ${spacing[4]};\n  }\n`\n\nconst ContentWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  height: 100%;\n`\n\nexport const DesignCard: React.FC<DesignCardProps> = ({\n  title,\n  excerpt,\n  labels = [],\n  tag,\n  coverImage,\n  date,\n  slug,\n}) => {\n  if (tag === 'design') {\n    return (\n      <>\n        <DesignCardStyled>\n          <ImageWrapper>\n            <CoverImage title={title} src={coverImage} slug={slug} />\n          </ImageWrapper>\n          <ContentSection>\n            <ContentWrapper>\n              <Stack direction=\"column\" gap=\"md\">\n                <Typography variant=\"h3\">{title}</Typography>\n                <DateFormatter dateString={date} />\n                <Typography variant=\"small\">{excerpt}</Typography>\n                <Stack direction=\"row\" gap=\"xs\">\n                  {Array.isArray(labels) && labels.map((label, index) => (\n                    <Chip key={index} title={label} variant=\"default\" />\n                  ))}\n                </Stack>\n                <ButtonWrapper>\n                  <Button url={`/posts/${slug}`}>Read more</Button>\n                </ButtonWrapper>\n              </Stack>\n            </ContentWrapper>\n          </ContentSection>\n        </DesignCardStyled>\n        <SectionSeparator />\n      </>\n    )\n  }\n\n  return null\n}\n"]}